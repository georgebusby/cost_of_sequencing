# plot_cols <- c(topo.colors(n_cols, alpha)) #, rev(heat.colors(n_cols,alpha)))
plot(x, legend.only=TRUE, col=para_plot_cols,
legend.width=1, legend.shrink=0.5, horizontal = T,
#smallplot=c(0.85,0.9, 0.7,0.9)); par(mar = par("mar"),
axis.args=list(at=seq(x.range[1], x.range[2], 0.1),
labels=seq(x.range[1], x.range[2], 0.1)*100,
cex.axis=0.6),
legend.args=list(text='Malaria prevalence 2015 [PfPR (%)]', side=3, font=1, line=0, cex=0.5, las=1, adj=0.5))
dev.off()
png(paste0("AfricaPfPR2015.png"),
height=600,width=600, res=150)
## plot main map
##############################################################
## plot main map with pfpr
par(fig=c(first_plot_x1,first_plot_x2,first_plot_y1,first_plot_y2),
mar=c(0,0,0,0),bg=NA)
map1 <- map("world", col=c("grey"), fill=T, bg="white", lwd=0.0001, xlim = first_xlim, ylim= first_ylim)
plot(x,add = T, col = para_plot_cols, legend=F, axes = F)
par(fig=c(first_plot_x1,first_plot_x2,first_plot_y1,first_plot_y2),
mar=c(0,0,0,0),bg=NA)
map("world", col=c("grey60"), fill=F, lwd=1, xlim=first_xlim, ylim=first_ylim, add=T)
mtext(1,text = "Source: Bhatt et al 2015", line = -1, cex = 0.5, adj =1)
par(fig=c(first_plot_x1,first_plot_x2,first_plot_y1,first_plot_y2), new = T,bg=NA)
x.range <- c(minValue(x), maxValue(x))
# n_cols <- 20
# alpha <- 0.5
# plot_cols <- c(topo.colors(n_cols, alpha)) #, rev(heat.colors(n_cols,alpha)))
plot(x, legend.only=TRUE, col=para_plot_cols,
legend.width=1, legend.shrink=0.5, horizontal = T,
#smallplot=c(0.85,0.9, 0.7,0.9)); par(mar = par("mar"),
axis.args=list(at=seq(x.range[1], x.range[2], 0.1),
labels=seq(x.range[1], x.range[2], 0.1)*100,
cex.axis=0.6),
legend.args=list(text='Malaria prevalence 2015 [PfPR (%)]', side=3, font=1, line=0, cex=0.5, las=1, adj=0.5))
dev.off()
png(paste0("AfricaPfPR2015.png"),
height=600,width=600, res=150)
## plot main map
##############################################################
## plot main map with pfpr
par(fig=c(first_plot_x1,first_plot_x2,first_plot_y1,first_plot_y2),
mar=c(0,0,0,0),bg=NA)
map1 <- map("world", col=c("grey"), fill=T, bg="white", lwd=0.0001, xlim = first_xlim, ylim= first_ylim)
plot(x,add = T, col = para_plot_cols, legend=F, axes = F)
par(fig=c(first_plot_x1,first_plot_x2,first_plot_y1,first_plot_y2),
mar=c(0,0,0,0),bg=NA)
map("world", col=c("grey60"), fill=F, lwd=1, xlim=first_xlim, ylim=first_ylim, add=T)
mtext(1,text = "Source: Bhatt et al 2015", line = -1, cex = 0.5, adj =1)
par(fig=c(first_plot_x1,first_plot_x2,first_plot_y1,first_plot_y2), new = T,bg=NA)
x.range <- c(minValue(x), maxValue(x))
# n_cols <- 20
# alpha <- 0.5
# plot_cols <- c(topo.colors(n_cols, alpha)) #, rev(heat.colors(n_cols,alpha)))
plot(x, legend.only=TRUE, col=para_plot_cols,
legend.width=1, legend.shrink=0.5, horizontal = T,
#smallplot=c(0.85,0.9, 0.7,0.9)); par(mar = par("mar"),
axis.args=list(at=seq(x.range[1], x.range[2], 0.1),
labels=seq(x.range[1], x.range[2], 0.1)*100,
cex.axis=0.5),
legend.args=list(text='Malaria prevalence 2015 [PfPR (%)]', side=3, font=1, line=0, cex=0.5, las=1, adj=0.5))
dev.off()
png(paste0("AfricaPfPR2015.png"),
height=600,width=600, res=150)
## plot main map
##############################################################
## plot main map with pfpr
par(fig=c(first_plot_x1,first_plot_x2,first_plot_y1,first_plot_y2),
mar=c(0,0,0,0),bg=NA)
map1 <- map("world", col=c("grey"), fill=T, bg="white", lwd=0.0001, xlim = first_xlim, ylim= first_ylim)
plot(x,add = T, col = para_plot_cols, legend=F, axes = F)
par(fig=c(first_plot_x1,first_plot_x2,first_plot_y1,first_plot_y2),
mar=c(0,0,0,0),bg=NA)
map("world", col=c("grey60"), fill=F, lwd=1, xlim=first_xlim, ylim=first_ylim, add=T)
mtext(1,text = "Source: Bhatt et al 2015", line = -1, cex = 0.5, adj =1)
par(fig=c(first_plot_x1,first_plot_x2,first_plot_y1,first_plot_y2), new = T,bg=NA)
x.range <- c(minValue(x), maxValue(x))
# n_cols <- 20
# alpha <- 0.5
# plot_cols <- c(topo.colors(n_cols, alpha)) #, rev(heat.colors(n_cols,alpha)))
plot(x, legend.only=TRUE, col=para_plot_cols,
legend.width=1, legend.shrink=0.75, horizontal = T,
#smallplot=c(0.85,0.9, 0.7,0.9)); par(mar = par("mar"),
axis.args=list(at=seq(x.range[1], x.range[2], 0.1),
labels=seq(x.range[1], x.range[2], 0.1)*100,
cex.axis=0.5),
legend.args=list(text='Malaria prevalence 2015 [PfPR (%)]', side=3, font=1, line=0, cex=0.5, las=1, adj=0.5))
dev.off()
## I'M EXPERIMENTING WITH PLOTTING DATA FROM BHATT ET AL 2015 NATURE
## I DOWNLOADED DATA FROM www.map.zoo.ox.ac.uk
library(raster)
library(maps)
library(geosphere)
library(plotKML)
library(rgdal)
library(grid)
library(gridBase)
library(sp)
library(maptools)
library(rgeos)
library(countrycode)
source("~/R/Copy/Rprojects/AfricaPOPGEN/functions/makeTransparent.R")
install.packages("plotKML")
install.packages("rgdal", type = "source")
library(rgdal)
library(rgdal)
install.packages("rgdal", type = "source")
install.packages("rgdal", type = "source")
install.packages("rgdal", type = "source")
install.packages("rgdal", type = "source")
library(raster)
library(maps)
library(geosphere)
library(plotKML)
library(rgdal)
library(grid)
library(gridBase)
library(sp)
library(maptools)
library(rgeos)
library(countrycode)
source("~/R/Copy/Rprojects/AfricaPOPGEN/functions/makeTransparent.R")
library(raster)
library(maps)
library(geosphere)
library(plotKML)
library(rgdal)
library(grid)
library(gridBase)
library(sp)
library(maptools)
library(rgeos)
library(countrycode)
source("~/R/Copy/Rprojects/AfricaPOPGEN/functions/makeTransparent.R")
##############################################################
## get prevalence rastter
raster_file <- "~/repos/anopheles/data/bhatt2015_meanrasters/MODEL43.2015.PR.rmean.stable.tif"
#  raster_file <- "~/repos/anopheles/data/bhatt2015_meanrasters/MODEL43.2015.inc.rate.PR.rmean.stable.tif"
x <- raster(raster_file)
x <- setMinMax(x)
##############################################################
### NB: this is the 'final' route [06/07/2018]
gpx.raw <- readGPX("~/repos/observatory/data/GPX/20180706_Swap2kilifi_final.gpx")
gpx.raw <- readGPX("~/repos/observatory/data/GPX/20180726_Swap2KilifiQuick.kml")
routes <- c()
for(i in 1:length(gpx.raw$tracks)){
location <- gpx.raw$tracks[[i]][[1]]
routes <- rbind(routes,cbind(location,i))
}
colnames(routes) <- c("longitude","latitude","ele","name","track")
route1 <- c()
for(i in c(1)){
route1 <- rbind(route1,routes[routes$track==i,])
}
##############################################################
## extract info on which countries are being crossed
routes <- route1
pfpr_route <- extract(x,cbind(routes$longitude,routes$latitude))
pfpr_route[is.na(pfpr_route)] <- 0
## distance between points
routes_dist <- c(0,distHaversine(p1=routes[1:(nrow(routes)-1),1:2],p2=routes[2:nrow(routes),1:2]))
routes_cumdist <- cumsum(routes_dist)
routes_total <- sum(routes_dist)/1000
routes_where <- map.where("world",x=routes$longitude,y=routes$latitude)
## sometimes i get NA, which is probably when I've fallen into the sea
## so switch NAs to previous country
for(j in which(is.na(routes_where))){
routes_where[j] <- routes_where[j-1]
}
##############################################################
## make a table of countries and lat/long of entry exit
border_crossings <- c(routes_where[1],routes$longitude[1],routes$latitude[1],1)
for(j in 2:length(routes_where)){
if(routes_where[j]!=routes_where[j-1]){
border_crossings <- rbind(border_crossings,
c(routes_where[j],routes$longitude[j],routes$latitude[j],j))
}
}
border_crossings <- data.frame(border_crossings, stringsAsFactors = F)
colnames(border_crossings) <- c("country","long", "lat","index")
## manually remove some of these where the border crossing is v. small
#to_remove <- c(4,5,6,8,9,10,11)
#to_remove <- c(3,4)
#border_crossings <- border_crossings[-to_remove,]
exped_pops <- unique(border_crossings$country)
##############################################################
## expedition cities
#c("Dakar",14.764500,-17.367455),
#c("Douala",4.054136,9.742110),
exped_cities <- data.frame(gpx.raw$waypoints[,c("name","lat","lon")],
stringsAsFactors = F)
#exped_waypoints <- c(1:10,44:51,41:42)
#exped_cities <- exped_cities[exped_waypoints,]
rownames(exped_cities) <- 1:nrow(exped_cities)
exped_cities <- exped_cities[rownames(exped_cities)%in%route2_index,]
colnames(exped_cities) <- c("city","lat","long")
exped_cities$long <- as.numeric(exped_cities$long)
exped_cities$lat <- as.numeric(exped_cities$lat)
exped_start <- exped_cities$city[1]
start_offset <- c(-5,0)
start_pt <- c(exped_cities$long[exped_cities$city==exped_start],
exped_cities$lat[exped_cities$city==exped_start])
exped_end <- exped_cities$city[nrow(exped_cities)]
end_offset <- c(1,-5)
end_pt <- c(exped_cities$long[exped_cities$city==exped_end],
exped_cities$lat[exped_cities$city==exped_end])
##############################################################
## waypoints by distance
# for(i in 1:nrow(exped_cities)){
#   which(routes$latitude==round(exped_cities$lat[i],5)&routes$longitude==exped_cities$long[i])
#
# }
##############################################################
## GET OTHER ROUTE INFO
## ALTITUDE
for(i in exped_pops){
tmp <- getData('alt',country = i)
if(i == exped_countries[1]){
alt_raster <- tmp
} else {
alt_raster <- merge(alt_raster,tmp)
}
}
alt_route <- extract(alt_raster,cbind(routes$longitude,routes$latitude))
##
## temperature, ppt, bio
## just fo once
# min_temp <- getData('worldclim',var='tmin',lon=routes$longitude,lat=routes$latitude, res = 5)
# min_temp <- extract(min_temp,cbind(routes$longitude,routes$latitude))
# max_temp <- getData('worldclim',var='tmax',lon=routes$longitude,lat=routes$latitude, res = 5)
# max_temp <- extract(max_temp,cbind(routes$longitude,routes$latitude))
# avg_temp <- getData('worldclim',var='tmean',lon=routes$longitude,lat=routes$latitude, res = 5)
# avg_temp <- extract(avg_temp,cbind(routes$longitude,routes$latitude))
# ppte <- getData('worldclim',var='prec',lon=routes$longitude,lat=routes$latitude, res = 5)
# ppte <- extract(ppte,cbind(routes$longitude,routes$latitude))
# bioclim <- getData('worldclim',var='bio',lon=routes$longitude,lat=routes$latitude, res = 5)
# bioclim <- extract(bioclim,cbind(routes$longitude,routes$latitude))
# ## bioclim codes : http://worldclim.org/bioclim
#
months <- c(1:3)
min_temp <- rowMeans(min_temp[,months])
max_temp <- rowMeans(max_temp[,months])
avg_temp <- rowMeans(avg_temp[,months])
##############################################################
exped_name <- paste0(exped_start,"2",exped_end)
exped_name <- "The Mobile Malaria Project"
##############################################################
## plotting parameters
route_col <- "black"
route_lwd <- 1.5
route_lty <- 1
## plot positioning
first_plot_x1 <- 0
first_plot_x2 <- 1
first_plot_y1 <- 0.25
first_plot_y2 <- 1
first_xlim <- c(-20.000000, 50.000000)
first_ylim <- c(-35.000000, 10.000000)
map_inset_x1 <- 0.05
map_inset_x2 <- 0.4
map_inset_y1 <- 0.525
map_inset_y2 <- 0.775
inset_xlim <- c(10.000000, 45.000000)
inset_ylim <- c(-25.000000, 0.000000)
bottom_plot_x1 <- 0
bottom_plot_x2 <- 1
bottom_plot_y1 <- 0
bottom_plot_y2 <- 0.25
## colours
n_cols <- 20
alpha <- 0.5
para_plot_cols <- c(topo.colors(n_cols, alpha) ) #, rev(heat.colors(n_cols,alpha)))
png(paste0("~/repos/observatory/figures/",exped_name,"_FinalRoute4countriesPfPRQUICK_overviewNoStops.png"),
height=800,width=1000, res=150)
## plot main map
#layout(matrix(1:5,5,1),heights = c(8,2,2,2,2))
##############################################################
## plot main map with pfpr
par(mar = c(0,0,0,0))
map1 <- map("world", col=c("grey"), fill=T, bg="white", lwd=0.0001, xlim = first_xlim, ylim= first_ylim)
plot(x,add = T, col = para_plot_cols, legend=F, axes = F)
# par(fig=c(first_plot_x1,first_plot_x2,first_plot_y1,first_plot_y2),
#     mar=c(0,0,0,0),bg=NA)
map("world", col=c("grey60"), fill=F, lwd=1, xlim=first_xlim, ylim=first_ylim, add=T)
## ADD HIGHLIGHT COUNTRIES VISITED?
# for(i in exped_pops){
#   map("world", i,col=c("grey5"), fill=F, lwd=1, lty=1, xlim=first_xlim, ylim=first_ylim, add=T)
# }
###################################################################
## plot route
lines(routes$longitude, routes$latitude, col=route_col,lwd=route_lwd,lty=route_lty)
## plot start
line_end <-  start_pt+start_offset
lines(rbind(start_pt,line_end))
points(x=start_pt[1],y=start_pt[2], pch = 21, cex = 1.5, bg = "red")
text(line_end[1],line_end[2],labels=paste0(exped_start,"\nExpedition start"),cex = 1,adj = c(1,0.5))
## plot end
line_end <- end_pt + end_offset
lines(rbind(end_pt,line_end))
points(x=end_pt[1],y=end_pt[2], pch = 21, cex = 1.5, bg = "red")
text(line_end[1],line_end[2],labels=paste0(exped_end,"\nExpedition\nfinish"), cex = 1,
adj = c(0,0.5))
## plot stops
for(i in 2:(nrow(exped_cities)-1)){
points(x=exped_cities[i,3],y=exped_cities[i,2], pch = 21, cex = 1.5, bg = "red")
text(x=exped_cities[i,3],y=exped_cities[i,2], labels= rownames(exped_cities)[i],
col="floralwhite", cex = 0.75, font = 2)
}
## legend at bottom
legend("bottomleft",bty="n",lty = route_lty, lwd = route_lty, col = route_col,
pch = 21, cex = 0.8, pt.bg = "red",
pt.cex = 1.5, xpd = T,
seg.len = 4, inset = c(0,0.5),
legend = paste(exped_name,"route (with stops)\n",round(routes_total,-2),"km through",length(exped_pops),"countries"))
## NOW ADD LEGEND
# par(fig=c(first_plot_x1,first_plot_x2,first_plot_y1,first_plot_y2), new = T,bg=NA)
# x.range <- c(minValue(x), maxValue(x))
# n_cols <- 20
# alpha <- 0.5
# plot_cols <- c(topo.colors(n_cols, alpha)) #, rev(heat.colors(n_cols,alpha)))
plot(x, legend.only=TRUE, col=para_plot_cols,
legend.width=1, legend.shrink=0.5, horizontal = T,
#smallplot=c(0.85,0.9, 0.7,0.9)); par(mar = par("mar"),
axis.args=list(at=seq(x.range[1], x.range[2], 0.1),
labels=seq(x.range[1], x.range[2], 0.1)*100,
cex.axis=0.6),
legend.args=list(text='Malaria prevalence\n2015 [PfPR (%)]', side=2, font=1, line=3.5, cex=0.8, las=2, adj=0.5))
dev.off()
gpx.raw <- readGPX("~/repos/observatory/data/GPX/20180706_Swap2kilifi_final.gpx")
routes <- c()
for(i in 1:length(gpx.raw$tracks)){
location <- gpx.raw$tracks[[i]][[1]]
routes <- rbind(routes,cbind(location,i))
}
colnames(routes) <- c("longitude","latitude","ele","name","track")
route1 <- c()
for(i in c(1)){
route1 <- rbind(route1,routes[routes$track==i,])
}
##############################################################
## extract info on which countries are being crossed
routes <- route1
pfpr_route <- extract(x,cbind(routes$longitude,routes$latitude))
pfpr_route[is.na(pfpr_route)] <- 0
## distance between points
routes_dist <- c(0,distHaversine(p1=routes[1:(nrow(routes)-1),1:2],p2=routes[2:nrow(routes),1:2]))
routes_cumdist <- cumsum(routes_dist)
routes_total <- sum(routes_dist)/1000
routes_where <- map.where("world",x=routes$longitude,y=routes$latitude)
## sometimes i get NA, which is probably when I've fallen into the sea
## so switch NAs to previous country
for(j in which(is.na(routes_where))){
routes_where[j] <- routes_where[j-1]
}
##############################################################
## make a table of countries and lat/long of entry exit
border_crossings <- c(routes_where[1],routes$longitude[1],routes$latitude[1],1)
for(j in 2:length(routes_where)){
if(routes_where[j]!=routes_where[j-1]){
border_crossings <- rbind(border_crossings,
c(routes_where[j],routes$longitude[j],routes$latitude[j],j))
}
}
border_crossings <- data.frame(border_crossings, stringsAsFactors = F)
colnames(border_crossings) <- c("country","long", "lat","index")
## manually remove some of these where the border crossing is v. small
#to_remove <- c(4,5,6,8,9,10,11)
#to_remove <- c(3,4)
#border_crossings <- border_crossings[-to_remove,]
exped_pops <- unique(border_crossings$country)
##############################################################
## expedition cities
#c("Dakar",14.764500,-17.367455),
#c("Douala",4.054136,9.742110),
exped_cities <- data.frame(gpx.raw$waypoints[,c("name","lat","lon")],
stringsAsFactors = F)
#exped_waypoints <- c(1:10,44:51,41:42)
#exped_cities <- exped_cities[exped_waypoints,]
rownames(exped_cities) <- 1:nrow(exped_cities)
exped_cities <- exped_cities[rownames(exped_cities)%in%route2_index,]
colnames(exped_cities) <- c("city","lat","long")
exped_cities$long <- as.numeric(exped_cities$long)
exped_cities$lat <- as.numeric(exped_cities$lat)
exped_start <- exped_cities$city[1]
start_offset <- c(-5,0)
start_pt <- c(exped_cities$long[exped_cities$city==exped_start],
exped_cities$lat[exped_cities$city==exped_start])
exped_end <- exped_cities$city[nrow(exped_cities)]
end_offset <- c(1,-5)
end_pt <- c(exped_cities$long[exped_cities$city==exped_end],
exped_cities$lat[exped_cities$city==exped_end])
##############################################################
## waypoints by distance
# for(i in 1:nrow(exped_cities)){
#   which(routes$latitude==round(exped_cities$lat[i],5)&routes$longitude==exped_cities$long[i])
#
# }
##############################################################
## GET OTHER ROUTE INFO
## ALTITUDE
for(i in exped_pops){
tmp <- getData('alt',country = i)
if(i == exped_countries[1]){
alt_raster <- tmp
} else {
alt_raster <- merge(alt_raster,tmp)
}
}
alt_route <- extract(alt_raster,cbind(routes$longitude,routes$latitude))
##
## temperature, ppt, bio
## just fo once
# min_temp <- getData('worldclim',var='tmin',lon=routes$longitude,lat=routes$latitude, res = 5)
# min_temp <- extract(min_temp,cbind(routes$longitude,routes$latitude))
# max_temp <- getData('worldclim',var='tmax',lon=routes$longitude,lat=routes$latitude, res = 5)
# max_temp <- extract(max_temp,cbind(routes$longitude,routes$latitude))
# avg_temp <- getData('worldclim',var='tmean',lon=routes$longitude,lat=routes$latitude, res = 5)
# avg_temp <- extract(avg_temp,cbind(routes$longitude,routes$latitude))
# ppte <- getData('worldclim',var='prec',lon=routes$longitude,lat=routes$latitude, res = 5)
# ppte <- extract(ppte,cbind(routes$longitude,routes$latitude))
# bioclim <- getData('worldclim',var='bio',lon=routes$longitude,lat=routes$latitude, res = 5)
# bioclim <- extract(bioclim,cbind(routes$longitude,routes$latitude))
# ## bioclim codes : http://worldclim.org/bioclim
#
months <- c(1:3)
min_temp <- rowMeans(min_temp[,months])
max_temp <- rowMeans(max_temp[,months])
avg_temp <- rowMeans(avg_temp[,months])
##############################################################
exped_name <- paste0(exped_start,"2",exped_end)
exped_name <- "The Mobile Malaria Project"
##############################################################
## plotting parameters
route_col <- "black"
route_lwd <- 1.5
route_lty <- 1
## plot positioning
first_plot_x1 <- 0
first_plot_x2 <- 1
first_plot_y1 <- 0.25
first_plot_y2 <- 1
first_xlim <- c(-20.000000, 50.000000)
first_ylim <- c(-35.000000, 10.000000)
map_inset_x1 <- 0.05
map_inset_x2 <- 0.4
map_inset_y1 <- 0.525
map_inset_y2 <- 0.775
inset_xlim <- c(10.000000, 45.000000)
inset_ylim <- c(-25.000000, 0.000000)
bottom_plot_x1 <- 0
bottom_plot_x2 <- 1
bottom_plot_y1 <- 0
bottom_plot_y2 <- 0.25
## colours
n_cols <- 20
alpha <- 0.5
para_plot_cols <- c(topo.colors(n_cols, alpha) ) #, rev(heat.colors(n_cols,alpha)))
png(paste0("~/repos/observatory/figures/",exped_name,"_FinalRoute4countriesPfPRQUICK_overviewNoStops.png"),
height=800,width=1000, res=150)
## plot main map
#layout(matrix(1:5,5,1),heights = c(8,2,2,2,2))
##############################################################
## plot main map with pfpr
par(mar = c(0,0,0,0))
map1 <- map("world", col=c("grey"), fill=T, bg="white", lwd=0.0001, xlim = first_xlim, ylim= first_ylim)
plot(x,add = T, col = para_plot_cols, legend=F, axes = F)
# par(fig=c(first_plot_x1,first_plot_x2,first_plot_y1,first_plot_y2),
#     mar=c(0,0,0,0),bg=NA)
map("world", col=c("grey60"), fill=F, lwd=1, xlim=first_xlim, ylim=first_ylim, add=T)
## ADD HIGHLIGHT COUNTRIES VISITED?
# for(i in exped_pops){
#   map("world", i,col=c("grey5"), fill=F, lwd=1, lty=1, xlim=first_xlim, ylim=first_ylim, add=T)
# }
###################################################################
## plot route
lines(routes$longitude, routes$latitude, col=route_col,lwd=route_lwd,lty=route_lty)
## plot start
line_end <-  start_pt+start_offset
lines(rbind(start_pt,line_end))
points(x=start_pt[1],y=start_pt[2], pch = 21, cex = 1.5, bg = "red")
text(line_end[1],line_end[2],labels=paste0(exped_start,"\nExpedition start"),cex = 1,adj = c(1,0.5))
## plot end
line_end <- end_pt + end_offset
lines(rbind(end_pt,line_end))
points(x=end_pt[1],y=end_pt[2], pch = 21, cex = 1.5, bg = "red")
text(line_end[1],line_end[2],labels=paste0(exped_end,"\nExpedition\nfinish"), cex = 1,
adj = c(0,0.5))
## plot stops
# for(i in 2:(nrow(exped_cities)-1)){
#   points(x=exped_cities[i,3],y=exped_cities[i,2], pch = 21, cex = 1.5, bg = "red")
#   text(x=exped_cities[i,3],y=exped_cities[i,2], labels= rownames(exped_cities)[i],
#        col="floralwhite", cex = 0.75, font = 2)
# }
## legend at bottom
legend("bottomleft",bty="n",lty = route_lty, lwd = route_lty, col = route_col,
pch = 21, cex = 0.8, pt.bg = "red",
pt.cex = 1.5, xpd = T,
seg.len = 4, inset = c(0,0.5),
legend = paste(exped_name,"route\n",round(routes_total,-2),"km through",length(exped_pops),"countries"))
## NOW ADD LEGEND
# par(fig=c(first_plot_x1,first_plot_x2,first_plot_y1,first_plot_y2), new = T,bg=NA)
# x.range <- c(minValue(x), maxValue(x))
# n_cols <- 20
# alpha <- 0.5
# plot_cols <- c(topo.colors(n_cols, alpha)) #, rev(heat.colors(n_cols,alpha)))
plot(x, legend.only=TRUE, col=para_plot_cols,
legend.width=1, legend.shrink=0.5, horizontal = T,
#smallplot=c(0.85,0.9, 0.7,0.9)); par(mar = par("mar"),
axis.args=list(at=seq(x.range[1], x.range[2], 0.1),
labels=seq(x.range[1], x.range[2], 0.1)*100,
cex.axis=0.6),
legend.args=list(text='Malaria prevalence\n2015 [PfPR (%)]', side=2, font=1, line=3.5, cex=0.8, las=2, adj=0.5))
dev.off()
