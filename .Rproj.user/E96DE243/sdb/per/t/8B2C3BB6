{
    "collab_server" : "",
    "contents" : "## I'M EXPERIMENTING WITH PLOTTING DATA FROM BHATT ET AL 2015 NATURE\n## I DOWNLOADED DATA FROM www.map.zoo.ox.ac.uk\n\nlibrary(raster)\nlibrary(maps)  \nlibrary(geosphere)  \nlibrary(plotKML)\nlibrary(rgdal)\nlibrary(grid)\nlibrary(gridBase)\nlibrary(sp)\nlibrary(maptools)\nlibrary(rgeos)\nlibrary(countrycode)\nsource(\"~/R/Copy/Rprojects/AfricaPOPGEN/functions/makeTransparent.R\")\n\n\n\n##############################################################\n## get prevalence rastter\nraster_file <- \"~/repos/anopheles/data/bhatt2015_meanrasters/MODEL43.2015.PR.rmean.stable.tif\" \n#  raster_file <- \"~/repos/anopheles/data/bhatt2015_meanrasters/MODEL43.2015.inc.rate.PR.rmean.stable.tif\"\nx <- raster(raster_file)\nx <- setMinMax(x)\n##############################################################\n## sort out route and place info\n#gpx.raw <- readGPX(\"~/repos/plasmodium/data/mapstogpx20170901_151942.gpx\") ## old route\n#gpx.raw <- readGPX(\"~/repos/plasmodium/data/mapstogpx20170904_150547.gpx\")\n#gpx.raw <- readGPX(\"~/repos/plasmodium/data/mapstogpx20170904_152141.gpx\") ## Camerron to Kenya\n#gpx.raw <- readGPX(\"~/repos/observatory/data/dakar2douala20171018.gpx\")\n## route from this website: https://goo.gl/maps/wnWMhHT1FKk\n#gpx.raw <- readGPX(\"~/repos/observatory/data/luanda_kilifi_20180604_154255.gpx\")\n##GPS visualiser: http://www.gpsvisualizer.com/convert_input\n#gpx.raw <- readGPX(\"~/repos/observatory/data/luanda_kilifi_20180604_gpsvisualiser.gpx\")\n## use GPS visualiser to export to kml\n## oopen in google my maps\n## use https://mygeodata.cloud/result to convert from kml to gdx\n## then extract to *.gpx\n\n## MAP IS STORED IN MYMAPS ON GOOGLE\n## FOLLOW THESE INSTRUCTIONS\n## http://www.stevencanplan.com/2011/02/converting-google-my-maps-to-kml-and-gpx/\n## resulting gpx file won't load into R\n## try this converter: (after downloading kml from mymaps)\n## https://kml2gpx.com\n\n\n## STEPS ARE AS FOLLOWS:\n## 00 MAKE JOURNEY ON GOOGLE MAPS: https://goo.gl/maps/ZYBbPuXEeW32\n## 01 CONVERT TO KML WITH http://www.gpsvisualizer.com/convert_input : 20180607_LuandaKilifi.kml\n## 02 IMPORT INTO GOOGLE MY MAPS and EXPORT: 20180607_LuandaKilifiMyMaps.kml\n## 03 IMPORT INTO https://kml2gpx.com/ [https://mygeodata.cloud/result put you need to pay..]\n\n### NB: this is the 'final' route [06/07/2018]\ngpx.raw <- readGPX(\"~/repos/observatory/data/GPX/20180706_Swap2kilifi_final.gpx\")\n\n#gpx.raw <- readGPX(\"~/repos/observatory/data/GPX/20180726_Swap2KilifiQuick.kml\")\n\nroutes <- c()\nfor(i in 1:length(gpx.raw$tracks)){\n  location <- gpx.raw$tracks[[i]][[1]]\n  routes <- rbind(routes,cbind(location,i))\n}\ncolnames(routes) <- c(\"longitude\",\"latitude\",\"ele\",\"name\",\"track\")\n\nroute1 <- c()\nfor(i in c(1)){\n  route1 <- rbind(route1,routes[routes$track==i,])\n}\n\n\n##############################################################\n## extract info on which countries are being crossed\nroutes <- route1\npfpr_route <- extract(x,cbind(routes$longitude,routes$latitude))\npfpr_route[is.na(pfpr_route)] <- 0\n## distance between points\nroutes_dist <- c(0,distHaversine(p1=routes[1:(nrow(routes)-1),1:2],p2=routes[2:nrow(routes),1:2]))\nroutes_cumdist <- cumsum(routes_dist)\nroutes_total <- sum(routes_dist)/1000\nroutes_where <- map.where(\"world\",x=routes$longitude,y=routes$latitude)\n## sometimes i get NA, which is probably when I've fallen into the sea\n## so switch NAs to previous country\nfor(j in which(is.na(routes_where))){\n  routes_where[j] <- routes_where[j-1]\n}\n\n##############################################################\n## make a table of countries and lat/long of entry exit\nborder_crossings <- c(routes_where[1],routes$longitude[1],routes$latitude[1],1)\nfor(j in 2:length(routes_where)){\n  if(routes_where[j]!=routes_where[j-1]){\n    border_crossings <- rbind(border_crossings,\n                              c(routes_where[j],routes$longitude[j],routes$latitude[j],j))\n  }\n}\nborder_crossings <- data.frame(border_crossings, stringsAsFactors = F)\ncolnames(border_crossings) <- c(\"country\",\"long\", \"lat\",\"index\")\n\n## manually remove some of these where the border crossing is v. small\n#to_remove <- c(4,5,6,8,9,10,11)\n#to_remove <- c(3,4)\n#border_crossings <- border_crossings[-to_remove,]\nexped_pops <- unique(border_crossings$country)\n\n##############################################################\n## expedition cities\n#c(\"Dakar\",14.764500,-17.367455),\n#c(\"Douala\",4.054136,9.742110),\nexped_cities <- data.frame(gpx.raw$waypoints[,c(\"name\",\"lat\",\"lon\")],\n                           stringsAsFactors = F)\n#exped_waypoints <- c(1:10,44:51,41:42)\n#exped_cities <- exped_cities[exped_waypoints,]\nrownames(exped_cities) <- 1:nrow(exped_cities)\n\nexped_cities <- exped_cities[rownames(exped_cities)%in%route2_index,]\n\ncolnames(exped_cities) <- c(\"city\",\"lat\",\"long\")\nexped_cities$long <- as.numeric(exped_cities$long)\nexped_cities$lat <- as.numeric(exped_cities$lat)\nexped_start <- exped_cities$city[1]\nstart_offset <- c(-5,0)\nstart_pt <- c(exped_cities$long[exped_cities$city==exped_start],\n              exped_cities$lat[exped_cities$city==exped_start])\nexped_end <- exped_cities$city[nrow(exped_cities)]\nend_offset <- c(1,-5)\nend_pt <- c(exped_cities$long[exped_cities$city==exped_end],\n            exped_cities$lat[exped_cities$city==exped_end])\n##############################################################\n## waypoints by distance\n# for(i in 1:nrow(exped_cities)){\n#   which(routes$latitude==round(exped_cities$lat[i],5)&routes$longitude==exped_cities$long[i])\n#   \n# }\n\n##############################################################\n## GET OTHER ROUTE INFO\n## ALTITUDE\nfor(i in exped_pops){\n  tmp <- getData('alt',country = i)\n  if(i == exped_countries[1]){\n    alt_raster <- tmp\n  } else {\n    alt_raster <- merge(alt_raster,tmp)\n  }\n}\n\nalt_route <- extract(alt_raster,cbind(routes$longitude,routes$latitude))\n\n##\n## temperature, ppt, bio\n## just fo once \n# min_temp <- getData('worldclim',var='tmin',lon=routes$longitude,lat=routes$latitude, res = 5)\n# min_temp <- extract(min_temp,cbind(routes$longitude,routes$latitude))\n# max_temp <- getData('worldclim',var='tmax',lon=routes$longitude,lat=routes$latitude, res = 5)\n# max_temp <- extract(max_temp,cbind(routes$longitude,routes$latitude))\n# avg_temp <- getData('worldclim',var='tmean',lon=routes$longitude,lat=routes$latitude, res = 5)\n# avg_temp <- extract(avg_temp,cbind(routes$longitude,routes$latitude))\n# ppte <- getData('worldclim',var='prec',lon=routes$longitude,lat=routes$latitude, res = 5)\n# ppte <- extract(ppte,cbind(routes$longitude,routes$latitude))\n# bioclim <- getData('worldclim',var='bio',lon=routes$longitude,lat=routes$latitude, res = 5)\n# bioclim <- extract(bioclim,cbind(routes$longitude,routes$latitude))\n# ## bioclim codes : http://worldclim.org/bioclim\n# \nmonths <- c(1:3)\n\nmin_temp <- rowMeans(min_temp[,months])\nmax_temp <- rowMeans(max_temp[,months])\navg_temp <- rowMeans(avg_temp[,months])\n\n\n##############################################################\nexped_name <- paste0(exped_start,\"2\",exped_end)\n\nexped_name <- \"The Mobile Malaria Project\"\n\n##############################################################\n## plotting parameters\nroute_col <- \"black\"\nroute_lwd <- 1.5\nroute_lty <- 1\n\n## plot positioning\nfirst_plot_x1 <- 0\nfirst_plot_x2 <- 1\nfirst_plot_y1 <- 0.25\nfirst_plot_y2 <- 1\nfirst_xlim <- c(-20.000000, 50.000000)  \nfirst_ylim <- c(-35.000000, 10.000000)\n\nmap_inset_x1 <- 0.05\nmap_inset_x2 <- 0.4\nmap_inset_y1 <- 0.525\nmap_inset_y2 <- 0.775\ninset_xlim <- c(10.000000, 45.000000)  \ninset_ylim <- c(-25.000000, 0.000000)\n\nbottom_plot_x1 <- 0\nbottom_plot_x2 <- 1\nbottom_plot_y1 <- 0\nbottom_plot_y2 <- 0.25\n\n## colours\nn_cols <- 20\nalpha <- 0.5\npara_plot_cols <- c(topo.colors(n_cols, alpha) ) #, rev(heat.colors(n_cols,alpha)))\n\npng(paste0(\"~/repos/observatory/figures/\",exped_name,\"_FinalRoute4countriesPfPRQUICK_overviewNoStops.png\"),\n    height=800,width=1000, res=150)\n  ## plot main map\n\n  #layout(matrix(1:5,5,1),heights = c(8,2,2,2,2))\n\n  ##############################################################\n  ## plot main map with pfpr\n  par(mar = c(0,0,0,0))\n  map1 <- map(\"world\", col=c(\"grey\"), fill=T, bg=\"white\", lwd=0.0001, xlim = first_xlim, ylim= first_ylim)  \n  plot(x,add = T, col = para_plot_cols, legend=F, axes = F)\n  # par(fig=c(first_plot_x1,first_plot_x2,first_plot_y1,first_plot_y2),\n  #     mar=c(0,0,0,0),bg=NA)\n  map(\"world\", col=c(\"grey60\"), fill=F, lwd=1, xlim=first_xlim, ylim=first_ylim, add=T)  \n  ## ADD HIGHLIGHT COUNTRIES VISITED?\n  # for(i in exped_pops){\n  #   map(\"world\", i,col=c(\"grey5\"), fill=F, lwd=1, lty=1, xlim=first_xlim, ylim=first_ylim, add=T)  \n  # }\n  \n  ###################################################################\n  ## plot route\n  lines(routes$longitude, routes$latitude, col=route_col,lwd=route_lwd,lty=route_lty)\n  ## plot start\n  line_end <-  start_pt+start_offset\n  lines(rbind(start_pt,line_end))\n  points(x=start_pt[1],y=start_pt[2], pch = 21, cex = 1.5, bg = \"red\")\n  text(line_end[1],line_end[2],labels=paste0(exped_start,\"\\nExpedition start\"),cex = 1,adj = c(1,0.5))\n  ## plot end\n  line_end <- end_pt + end_offset\n  lines(rbind(end_pt,line_end))\n  points(x=end_pt[1],y=end_pt[2], pch = 21, cex = 1.5, bg = \"red\")\n  text(line_end[1],line_end[2],labels=paste0(exped_end,\"\\nExpedition\\nfinish\"), cex = 1,\n       adj = c(0,0.5))\n  ## plot stops\n  # for(i in 2:(nrow(exped_cities)-1)){\n  #   points(x=exped_cities[i,3],y=exped_cities[i,2], pch = 21, cex = 1.5, bg = \"red\")\n  #   text(x=exped_cities[i,3],y=exped_cities[i,2], labels= rownames(exped_cities)[i],\n  #        col=\"floralwhite\", cex = 0.75, font = 2)\n  # }\n  ## legend at bottom\n  legend(\"bottomleft\",bty=\"n\",lty = route_lty, lwd = route_lty, col = route_col,\n         pch = 21, cex = 0.8, pt.bg = \"red\", \n         pt.cex = 1.5, xpd = T,\n         seg.len = 4, inset = c(0,0.5),\n         legend = paste(exped_name,\"route\\n\",round(routes_total,-2),\"km through\",length(exped_pops),\"countries\"))\n  \n  \n  ## NOW ADD LEGEND\n  # par(fig=c(first_plot_x1,first_plot_x2,first_plot_y1,first_plot_y2), new = T,bg=NA)\n  # x.range <- c(minValue(x), maxValue(x))\n  # n_cols <- 20\n  # alpha <- 0.5\n  # plot_cols <- c(topo.colors(n_cols, alpha)) #, rev(heat.colors(n_cols,alpha)))\n  plot(x, legend.only=TRUE, col=para_plot_cols,\n       legend.width=1, legend.shrink=0.5, horizontal = T,\n       #smallplot=c(0.85,0.9, 0.7,0.9)); par(mar = par(\"mar\"),\n       axis.args=list(at=seq(x.range[1], x.range[2], 0.1),\n                      labels=seq(x.range[1], x.range[2], 0.1)*100,\n                      cex.axis=0.6),\n       legend.args=list(text='Malaria prevalence\\n2015 [PfPR (%)]', side=2, font=1, line=3.5, cex=0.8, las=2, adj=0.5))\n\n  \n  dev.off()\n  \n\n  \n  \npng(paste0(\"~/repos/observatory/figures/\",exped_name,\"_FinalRoute4countriesClimateQUICK.png\"),\n      height=900,width=1000, res=150)\n  \n  layout(matrix(1:4,4,1),heights = c(2,2,2,3))\n\n  ##########################################################\n  ## plot the PfPR along the route at bottom\n  par(mar  = c(1,4,1,1))\n  y_at <- pretty(x.range)\n  plot(routes_cumdist,pfpr_route,type = \"n\", axes = F,\n       xlab = \"Distance (km)\", ylab = \"Malaria prevalence\",\n       new = T, ylim = x.range)\n  axis(2,las = 2, at = y_at, labels = y_at*100, xpd = T)\n  xlabs <- pretty(routes_cumdist)\n  axis(1, at = xlabs, labels = rep(\"\",length(xlabs)) , xpd = T)\n\n  ## plot pfpr heat in background\n  col_range <- seq(x.range[1], x.range[2], 0.1)\n  \n  y_ats <- seq(0,max(x.range),length=length(para_plot_cols))\n  for(y in 2:length(para_plot_cols)){\n    rect(xleft = xlabs[1],xright = xlabs[length(xlabs)],\n         ybottom = y_ats[(y-1)], ytop = y_ats[y],\n         border = NA, col = para_plot_cols[(y-1)])\n  }\n \n  ## find line and plot white polygon on top\n  \n  p1 <- spline(routes_cumdist,pfpr_route, method = 'n', n=10000)\n  ## thin out points\n  p2 <- spline(cumsum(routes_dist),pfpr_route, method = 'n', n=100)\n  \n  ## white out above the line\n  polygon(c(p2$x,max(p2$x),12e6,rev(p2$x)), c(p2$y,0,0,rep(1,length(p2$y))), col=\"white\",border = NA)\n    \n  ## plot country info\n  for(j in 1:nrow(border_crossings)){\n    ind <- as.numeric(border_crossings$index[j])\n    abline(v=routes_cumdist[ind],\n           col = \"grey15\", lwd = 2, lty=2)\n    \n    j1 <- as.numeric(border_crossings$index[j+1])\n    if(is.na(j1)) j1 <- length(routes_dist)\n    \n    text_at <- median(routes_cumdist[c(ind,j1)])\n    text_name <- strsplit(border_crossings$country[j],split = \":\")[[1]][1]\n    text_name <- gsub(\" of\",\"\\nof\",text_name)\n    \n    max_y <- 0.8\n    text_srt <- 0\n    if(text_name %in% c(\"Botswana\")) max_y <- 0.7\n      \n    text(x=text_at,y = max_y,\n         labels = text_name, srt = 0, xpd = T,\n         adj = c(0.5,1),\n         srt = text_srt)\n    max_y_old <- max_y\n  }\n  \n  ## finally plot lines\n  lines(p2, lwd = 2,col = \"grey35\")\n  \n############################################################\n## ALTITUDE\n  y_at <- pretty(alt_route)\n  plot(routes_cumdist,alt_route,type = \"n\", axes = F,\n       xlab = \"Distance (km)\", ylab = \"altitude (m)\",\n       new = T)\n  axis(2,las = 2, at = y_at, labels = y_at, xpd = T)\n  xlabs <- pretty(routes_cumdist)\n  axis(1, at = xlabs, labels = rep(\"\",length(xlabs)) , xpd = T)  \n  ## plot country info\n  for(j in 1:nrow(border_crossings)){\n    ind <- as.numeric(border_crossings$index[j])\n    abline(v=routes_cumdist[ind],\n           col = \"grey15\", lwd = 2, lty=2)\n    \n    j1 <- as.numeric(border_crossings$index[j+1])\n    if(is.na(j1)) j1 <- length(routes_dist)\n    \n    text_at <- median(routes_cumdist[c(ind,j1)])\n    text_name <- strsplit(border_crossings$country[j],split = \":\")[[1]][1]\n    text_name <- gsub(\" of\",\"\\nof\",text_name)\n    \n    max_y <- 2000\n    text_srt <- 0\n    if(text_name %in% c(\"Botswana\")) max_y <- 0.7\n    \n    # text(x=text_at,y = max_y,\n    #      labels = text_name, srt = 0, xpd = T,\n    #      adj = c(0.5,1),\n    #      srt = text_srt)\n    max_y_old <- max_y\n  }\n  \n  p2 <- spline(cumsum(routes_dist),alt_route, method = 'n', n=100)\n  lines(p2, lwd = 2,col = \"grey35\")\n  \n  ############################################################\n  ## TEMPERATURE AND PPTE\n  \n  y.range <- pretty(range(c(min_temp,max_temp,avg_temp)))\n  y.range1 <- pretty(range(ppte))\n  \n  y_at <- pretty(y.range)\n  plot(routes_cumdist,avg_temp,type = \"n\", axes = F,\n       xlab = \"Distance (km)\", ylab = \"Temperature (C)\",\n       new = T, ylim = c(y.range[1],y.range[length(y.range)]))\n  axis(2,las = 2, at = y_at, labels = y_at/10, xpd = T)\n  xlabs <- pretty(routes_cumdist)\n  axis(1, at = xlabs, labels = rep(\"\",length(xlabs)) , xpd = T)\n  \n  ## plot country info\n  for(j in 1:nrow(border_crossings)){\n    ind <- as.numeric(border_crossings$index[j])\n    abline(v=routes_cumdist[ind],\n           col = \"grey15\", lwd = 2, lty=2)\n    \n    j1 <- as.numeric(border_crossings$index[j+1])\n    if(is.na(j1)) j1 <- length(routes_dist)\n    \n    text_at <- median(routes_cumdist[c(ind,j1)])\n    text_name <- strsplit(border_crossings$country[j],split = \":\")[[1]][1]\n    text_name <- gsub(\" of\",\"\\nof\",text_name)\n    \n    max_y <- 2000\n    text_srt <- 0\n    if(text_name %in% c(\"Botswana\")) max_y <- 0.7\n    \n    text(x=text_at,y = max_y,\n         labels = text_name, srt = 0, xpd = T,\n         adj = c(0.5,1),\n         srt = text_srt)\n    max_y_old <- max_y\n  }\n  \n  pmin <- spline(cumsum(routes_dist),min_temp, method = 'n', n=100)\n  pmax <- spline(cumsum(routes_dist),max_temp, method = 'n', n=100)\n  polygon(c(pmin$x,rev(pmax$x)),\n          c(pmin$y,rev(pmax$y)), col = \"grey80\", border = NA)\n  p2 <- spline(cumsum(routes_dist),avg_temp, method = 'n', n=100)\n  lines(p2, lwd = 2,col = \"black\")\n  lines(pmin, lwd = 0.5,col = \"black\")\n  lines(pmax, lwd = 0.5,col = \"black\")\n\n######################################################################  \n## AND PPTE\n  y.range <- pretty(range(ppte[,months]))\n  par(mar  = c(4,4,1,1))\n  y_at <- pretty(y.range)\n  plot(routes_cumdist,ppte[,1],type = \"n\", axes = F,\n       xlab = \"Distance (km)\", ylab = \"Average monthly rainfall (mm)\",\n       new = T, ylim = c(y.range[1],y.range[length(y.range)]))\n  axis(2,las = 2, at = y_at, labels = y_at, xpd = T)\n  xlabs <- pretty(routes_cumdist)\n  axis(1, at = xlabs, labels = xlabs/1000 , xpd = T)\n  \n  ## plot country info\n  for(j in 1:nrow(border_crossings)){\n    ind <- as.numeric(border_crossings$index[j])\n    abline(v=routes_cumdist[ind],\n           col = \"grey15\", lwd = 2, lty=2)\n    \n    j1 <- as.numeric(border_crossings$index[j+1])\n    if(is.na(j1)) j1 <- length(routes_dist)\n    \n    text_at <- median(routes_cumdist[c(ind,j1)])\n    text_name <- strsplit(border_crossings$country[j],split = \":\")[[1]][1]\n    text_name <- gsub(\" of\",\"\\nof\",text_name)\n    \n    max_y <- 300\n    text_srt <- 0\n    if(text_name %in% c(\"Botswana\")) max_y <- 0.7\n    \n    # text(x=text_at,y = max_y,\n    #      labels = text_name, srt = 0, xpd = T,\n    #      adj = c(0.5,1),\n    #      srt = text_srt)\n    max_y_old <- max_y\n  }\n  \n  pJan <- spline(cumsum(routes_dist),ppte[,1], method = 'n', n=100)\n  pFeb <- spline(cumsum(routes_dist),ppte[,2], method = 'n', n=100)\n  pMar <- spline(cumsum(routes_dist),ppte[,3], method = 'n', n=100)\n  lines(pJan, lwd = 3,col = \"darkred\")\n  lines(pFeb, lwd = 3,col = \"lightblue\")\n  lines(pMar, lwd = 3,col = \"green4\")\n  \n  \n  legend(\"top\", legend=c(\"January\", \"February\",\"March\"),\n         lty = 1, lwd = 3,col = c(\"darkred\", \"lightblue\",\"green4\"),\n         bty = \"n\", horiz = T, inset = c(0,-0.05),xpd = T)\n  \n    \n  \ndev.off()\n  \n\n\n## i downloaded OSM data for each country from : http://download.geofabrik.de/africa.html \n## this pulls out all of the roads and puts it into a big spatiallines obj\nfor(country in exped_countries[c(3,4)]){\n  print(country)\n  road_dir <- paste0(\"/home/george/repos/observatory/data/OSM/\",country,\"/\") \n  roads <- readShapeLines(paste0(road_dir,\"gis_osm_roads_free_1.shp\"),\n                          proj4string = CRS(\"+proj=longlat +datum=WGS84\"))\n  # if(country == exped_countries[1]){\n  #   all_roads <- roads    \n  # } else {\n    all_roads <- rbind(all_roads,roads)\n#  }\n}\n\n\n##############################################################\n## plot FCO\n###################################################################\n## add FCO closeup\n\nfco_cols <- makeTransparent(c(\"red3\",\"yellow3\",\"yellowgreen\"),100)\npng(\"~/repos/observatory/figures/CostaPwani_FinalRoute4countriesQUICKFCO_Roads.png\",\n    width = 1200, height = 1400, res = 300)\n\nlayout(matrix(c(1,2),2,1),heights=c(5,2))\n\n\npar(mar=c(0,0,0,0))\n# plot(0,type = \"n\",xlab = \"\", ylab = \"\", axes = F, add = T,\n#      xlim = inset_xlim, ylim = inset_ylim, new = T)\n# \n# ###################################################################\n# ## this turns maps in spatial polygons so they can be clipped\n# gClip <- function(shp, bb){\n#   if(class(bb) == \"matrix\") b_poly <- as(extent(as.vector(t(bb))), \"SpatialPolygons\")\n#   else b_poly <- as(extent(bb), \"SpatialPolygons\")\n#   gIntersection(shp, b_poly, byid = TRUE)\n# }\n# \n# bb <- bbox(cbind(inset_xlim,inset_ylim))\n# map1 <- map(\"world\", fill = T, xlim=inset_xlim, ylim=inset_ylim, plot = F)\n# map1_sp <- map2SpatialPolygons(map1, IDs = map1$names)\n# map1_pl <- gClip(map1_sp,bb)\n# plot(map1_pl,col=c(\"grey\"), fill=T, lwd=1, lty=0.00001, xlim=inset_xlim, ylim=inset_ylim, add = T)\n\n## try this for admin areas: www.gadm.org/country\nfco_advice <- read.csv(\"~/repos/observatory/data/FCO_travel_advice - full_advice.csv\",\n                       stringsAsFactors = FALSE, header = T)\n\nmap1 <- map(\"world\", col=c(\"grey\"), fill=T, bg=\"white\", lwd=0.0001,\n            xlim = inset_xlim, ylim= inset_ylim)  \n\n\nfco_pops <- unique(fco_advice$CountryR)\n# for(j in 1:length(fco_pops)){\n#   country <- fco_pops[j]\n#   level <- unique(fco_advice$admin_levs[fco_advice$CountryR==country])\n#   if(level == 0){\n#     fo_advice <- unique(fco_advice$advice[fco_advice$CountryR==country])\n#     fo_col <- fco_cols[which(c(\"no_go\",\"essential\",\"good\")%in% fo_advice)]\n#     plot_country <- countrycode(country,\"iso3c\",\"country.name\")\n#     if(plot_country == \"Côte D'Ivoire\") plot_country <- \"Ivory Coast\"\n#     if(plot_country == \"Guinea Bissau\") plot_country <- \"Guinea-Bissau\"\n#     plot_country <- strsplit(plot_country, split = \" \\\\(\")[[1]][1]\n#     plot_country <- grep(plot_country,map1$names, value = T)\n#     if(length(plot_country) > 0){\n#       #map(\"world\", plot_country,col=fo_col, fill=T, lwd=0.1, lty=1, add=T, new = T) \n#       map2 <- map(\"world\", plot_country,col=fo_col, fill=T, plot = F) \n#       map2_sp <- map2SpatialPolygons(map2, IDs = map2$names)\n#       map2 <- gClip(map2_sp,bb)\n#       plot(map2, col=fo_col, fill=T, lwd=0.1, lty=1, add=T, new = T,border = NA)}\n#     else{\n#       print(country)}\n#   }\n#   \n#   else{\n#     \n#     tmp <- readRDS(paste0(\"~/repos/observatory/data/\",country,\"_adm\",level,\".rds\"))\n#     tmp <- SpatialPolygons2map(tmp, namefield = paste0(\"NAME_\",level))\n#     no_go <- fco_advice$RegionR[grep(\"no_go\",fco_advice$advice)]\n#     essential <- fco_advice$RegionR[grep(\"essential\",fco_advice$advice)]\n#     for(i in tmp$names){\n#       fo_col <- fco_cols[3]\n#       if(i %in% no_go){\n#         fo_col <- fco_cols[1]\n#       } \n#       if(i %in% essential){\n#         fo_col <- fco_cols[2]\n#       }\n#       # map(tmp, i,col=fo_col, fill=T, lwd=0.1, lty=1, add=T) \n#       map2 <- map(tmp, i,col=fo_col, fill=T, plot = F) \n#       map2_sp <- map2SpatialPolygons(map2, IDs = map2$names)\n#       map2 <- gClip(map2_sp,bb)\n#       if(!is.null(map2)){\n#         plot(map2, col=fo_col, fill=T, lwd=0.1, lty=1, add=T, border = NA)\n#       }\n#     }\n#   }\n# }\n## add country borders\n#map(\"world\", col=c(\"grey10\"), fill=F, lwd=0.5, lty=1, xlim=inset_xlim, ylim=inset_ylim, add=T)\nmap1 <- map(\"world\", fill = F, xlim=inset_xlim, ylim=inset_ylim, plot = F)\nmap1_sp <- map2SpatialLines(map1)\nmap1_pl <- gClip(map1_sp,bb)\nplot(map1_pl,col=c(\"grey65\"), lwd=0.5,  add = T)\n\n## plot route\nroute_col <- \"black\"\nroute_col2 <- \"white\"\nroute_lwd <- 6\nroute_lwd2 <- 4.5\nroute_lty <- 1\nlines(routes$longitude, routes$latitude, col=route_col,lwd=route_lwd,lty=route_lty)\nlines(routes$longitude, routes$latitude, col=route_col2,lwd=route_lwd2,lty=route_lty)\n\n\n# legend(\"right\",title = \"FCO travel advice 6 July 2018\",bty=\"n\",\n#        legend = c(\"OK/Check before\",\"Essential only\",\"No travel\"),\n#        fill = rev(fco_cols),border = \"grey15\",\n#        cex = 1, xpd=T, horiz = T, inset = c(0,0.1),\n#        x.intersp = 0.5)\n\n\n###\n# \n# ## base map\n# # par(mar=c(0,0,0,0))\n# # map1 <- map(\"world\", col=c(\"grey\"), fill=T, bg=\"white\", lwd=0.0001,\n# #             xlim = inset_xlim, ylim= inset_ylim)  \n# ## perhaps add a topographical/land use raster?\n# \n# ## look at the Natural Earth Files\n# #  raster_file2 <- \"/home/george/repos/observatory/data/NaturalEarth/NE1_HR_LC_SR/NE1_HR_LC_SR.tif\" \n# # #y <- readOGR(raster_file2,\"HYP_HR_SR\")\n# #  y <- raster(raster_file2)\n# #  y <- setMinMax(y)\n# n_cols <- 30\n# alpha <- 0.5\n# plot_cols <- c(terrain.colors(n_cols, alpha))\n# #  plot(y,add = T, legend=F, axes = F, col = plot_cols)\n# \n# ## probably need a different one\n# \n# ## this adds counry boundaries\n# map(\"world\", col=c(\"grey60\"), fill=F, lwd=1, xlim=inset_xlim, ylim=inset_ylim, add=T) \n\n\n## plot route\nroute_col <- \"black\"\nroute_col2 <- \"white\"\nroute_lwd <- 6\nroute_lwd2 <- 4.5\nroute_lty <- 1\nlines(routes$longitude, routes$latitude, col=route_col,lwd=route_lwd,lty=route_lty)\nlines(routes$longitude, routes$latitude, col=route_col2,lwd=route_lwd2,lty=route_lty)\n\n## plot major roads\nplot(SpatialLines(all_roads@lines[which(all_roads$fclass==\"motorway\")]),add = T, col = \"black\", lwd = 2)\nplot(SpatialLines(all_roads@lines[which(all_roads$fclass==\"trunk\")]),add = T, col = makeTransparent(\"brown\",200), lwd = 2)\nplot(SpatialLines(all_roads@lines[which(all_roads$fclass==\"primary\")]),add = T, col = makeTransparent(\"red\",200), lwd = 0.75)\nplot(SpatialLines(all_roads@lines[which(all_roads$fclass==\"secondary\")]),add = T, col = makeTransparent(\"orange\", 200), lwd = 0.5)\n#plot(SpatialLines(roads@lines[which(roads$fclass==\"tertiary\")]),add = T, col = \"lightblue\")\n## TO DO\n## add legend:\n## three types of road defined https://wiki.openstreetmap.org/wiki/Highway_Tag_Africa:\n\n\n# legend(\"bottom\",title = \"FCO travel advice 6 July 2018\",bty=\"n\",\n#        legend = c(\"OK/Check before\",\"Essential only\",\"No travel\"),\n#        fill = rev(fco_cols),border = \"grey15\",\n#        cex = 0.5, xpd=T, horiz = T, inset = c(0,-0.2),\n#        x.intersp = 0.25)\n# \n\n\npar(mar=c(0,0,1,0))\nplot(0,0, type = \"n\", xlab = \"\", ylab = \"\", axes = F)\nlegend(\"top\",\n       title = \"Road information downloaded from\\nOpen Street Map on 6 June 2018\",\n       col = c(\"black\",\n               \"black\",\n               makeTransparent(\"brown\",200),\n               makeTransparent(\"red\",200),\n               makeTransparent(\"orange\", 200)),\n       legend = c(\"Expedition Route\",\"Motorway\",\"Trunk road\", \"Primary road\",\"Secondary Road\"),\n       lwd = c(6,2,2,0.75,0.5),\n       cex = 0.5, bty = \"n\", xpd = T)\n\nlegend(\"top\",\n       title = \"_______________________________________________________________\",\n       col = c(\"white\",\n               \"black\",\n               makeTransparent(\"brown\",200),\n               makeTransparent(\"red\",200),\n               makeTransparent(\"orange\", 200)),\n       legend = c(\"_____\",\"________\",\"__________\", \"____________\",\"______________\"),\n       lwd = c(4.5,0,0,0,0),\n       cex = 0.5, bty = \"n\", text.col = \"white\")\n\ndev.off()\n\n\n",
    "created" : 1540204633297.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "646317116",
    "id" : "8B2C3BB6",
    "lastKnownWriteTime" : 1540204917,
    "last_content_update" : 1540204917449,
    "path" : "~/repos/observatory/plotExpeditionMap4countriesQUICK.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}